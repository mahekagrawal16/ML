# -*- coding: utf-8 -*-
"""Spam Mail Prediction using Machine Learning..ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/178xIuCBh1aKlhvGpeMqgtFJxv9GMfqif

Importing the Dependencies
"""

import pandas as pd
import numpy as np
import re
import joblib
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Preprocessing"""

#loading the data from csv file to a pandas Dataframe
raw_mail_data=pd.read_csv('/content/mail_data.csv')
#replace the null value with a null string
mail_data = raw_mail_data.where((pd.notnull(raw_mail_data)),'')

# Encode labels: spam = 0, ham = 1
mail_data.loc[mail_data['Category'] == 'spam', 'Category'] = 0
mail_data.loc[mail_data['Category'] == 'ham', 'Category'] = 1

# Convert Category to int
mail_data['Category'] = mail_data['Category'].astype(int)

# Preprocessing function
def preprocess(text):
    text = text.lower()
    text = re.sub(r'http\S+|www\S+|@\S+', '', text)
    text = re.sub(r'[^a-z\s]', '', text)
    text = re.sub(r'\s+', ' ', text).strip()
    return text

# Apply preprocessing to messages
mail_data['Message'] = mail_data['Message'].apply(preprocess)

print(raw_mail_data)

"""Splitting the data into training data and test data"""

# Separate features and labels
X = mail_data['Message']
Y = mail_data['Category']

# Split data
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=3)

# Feature Extraction

#transform the text data to feature vectors that can be used as input to the logistic regression
vectorizer = TfidfVectorizer(min_df=1, stop_words='english')
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

print(X)

print(y)

print(X_train)

print(X_train_vec)

"""Training the Model

Logistic Regression
"""

# Train model
model = LogisticRegression()
model.fit(X_train_vec, Y_train)

# Evaluate
train_accuracy = accuracy_score(y_train, model.predict(X_train_vec))
test_accuracy = accuracy_score(y_test, model.predict(X_test_vec))

print(f"Training Accuracy: {train_accuracy:.2f}")
print(f"Test Accuracy: {test_accuracy:.2f}")

# Save model and vectorizer
joblib.dump(model, 'spam_model.pkl')
joblib.dump(vectorizer, 'vectorizer.pkl')

"""Building a Predicitve System"""

# Load model and vectorizer
model = joblib.load('spam_model.pkl')
vectorizer = joblib.load('vectorizer.pkl')

# Preprocessing function reused
def preprocess(text):
    text = text.lower()
    text = re.sub(r'http\S+|www\S+|@\S+', '', text)
    text = re.sub(r'[^a-z\s]', '', text)
    text = re.sub(r'\s+', ' ', text).strip()
    return text

# Final prediction function
def predict_mail(message):
    processed = preprocess(message)
    vect_input = vectorizer.transform([processed])
    result = model.predict(vect_input)[0]
    print("\nInput Message:", message)
    print("Prediction:", "Ham mail" if result == 1 else "Spam mail")

# üîç Test on new/unseen messages
predict_mail("Congratulations! You have won a free iPhone. Click the link to claim.")
predict_mail("To stop receiving these emails from us just hit 'Reply'")
predict_mail("I've been searching for the right words to thank you for this breather. I promise i won‚Äôt take your help for granted.")

